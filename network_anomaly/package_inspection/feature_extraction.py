from network_anomaly.package_inspection.feature_calculations import (
    calculate_duration,
    map_protocol,
    map_service,
    map_state,
    count_source_packets,
    count_dest_packets,
    calculate_source_bytes,
    calculate_dest_bytes,
    calculate_rate,
    calculate_source_load,
    calculate_dest_load,
    calculate_source_loss,
    calculate_dest_loss,
    calculate_source_interval,
    calculate_dest_interval,
    calculate_source_jitter,
    calculate_dest_jitter,
    extract_source_window,
    calculate_rtt,
    calculate_transaction_depth,
    count_source_ports,
    count_dest_ports,
    extract_source_tcp_base,
    extract_dest_tcp_base,
    extract_dest_window,
    calculate_synack_delay,
    calculate_ack_delay,
    calculate_source_mean,
    calculate_dest_mean,
    calculate_response_body_length,
    check_ftp_login,
    count_ftp_commands,
    count_http_methods,
    check_same_ip_ports,
)


def extract_features_real_time(packet):
    features = {
        "dur": calculate_duration(packet),
        "proto": map_protocol(packet),
        "service": map_service(packet),
        "state": map_state(packet),
        "spkts": count_source_packets(packet),
        "dpkts": count_dest_packets(packet),
        "sbytes": calculate_source_bytes(packet),
        "dbytes": calculate_dest_bytes(packet),
        "rate": calculate_rate(packet),
        "sload": calculate_source_load(packet),
        "dload": calculate_dest_load(packet),
        "sloss": calculate_source_loss(packet),
        "dloss": calculate_dest_loss(packet),
        "sinpkt": calculate_source_interval(packet),
        "dinpkt": calculate_dest_interval(packet),
        "sjit": calculate_source_jitter(packet),
        "djit": calculate_dest_jitter(packet),
        "swin": extract_source_window(packet),
        "stcpb": extract_source_tcp_base(packet),
        "dtcpb": extract_dest_tcp_base(packet),
        "dwin": extract_dest_window(packet),
        "tcprtt": calculate_rtt(packet),
        "synack": calculate_synack_delay(packet),
        "ackdat": calculate_ack_delay(packet),
        "smean": calculate_source_mean(packet),
        "dmean": calculate_dest_mean(packet),
        "trans_depth": calculate_transaction_depth(packet),
        "response_body_len": calculate_response_body_length(packet),
        "ct_src_dport_ltm": count_source_ports(packet),
        "ct_dst_sport_ltm": count_dest_ports(packet),
        "is_ftp_login": check_ftp_login(packet),
        "ct_ftp_cmd": count_ftp_commands(packet),
        "ct_flw_http_mthd": count_http_methods(packet),
        "is_sm_ips_ports": check_same_ip_ports(packet),
    }
    return features
